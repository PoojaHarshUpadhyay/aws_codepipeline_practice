"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
/**
 * Remove undefined values from a dictionary
 */
function removeEmpty(x) {
    for (const key of Object.keys(x)) {
        if (x[key] === undefined) {
            delete x[key];
        }
    }
    return x;
}
exports.removeEmpty = removeEmpty;
/**
 * Checks that a value is a positive integer
 */
function ensurePositiveInteger(val) {
    if (!core_1.Token.isUnresolved(val) && Number.isInteger(val) && val < 0) {
        throw new Error(`\`${val}\` must be a positive integer.`);
    }
}
exports.ensurePositiveInteger = ensurePositiveInteger;
/**
 * Checks that a value is contained in a range of two other values
 */
function ensureInRange(val, start, end) {
    if (!core_1.Token.isUnresolved(val) && !(val >= start && val <= end)) {
        throw new Error(`\`${val}\` must be within range ${start}:${end}`);
    }
}
exports.ensureInRange = ensureInRange;
function stringifyOptions(options) {
    const _options = {};
    const filteredOptions = removeEmpty(options);
    for (const key of Object.keys(filteredOptions)) {
        // Convert value to string
        _options[key] = `${filteredOptions[key]}`;
    }
    return _options;
}
exports.stringifyOptions = stringifyOptions;
function renderCommonLogDriverOptions(opts) {
    return {
        'tag': opts.tag,
        'labels': joinWithCommas(opts.labels),
        'env': joinWithCommas(opts.env),
        'env-regex': opts.envRegex,
    };
}
exports.renderCommonLogDriverOptions = renderCommonLogDriverOptions;
function joinWithCommas(xs) {
    return xs && xs.join(',');
}
exports.joinWithCommas = joinWithCommas;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUE2RDtBQUc3RDs7R0FFRztBQUNILFNBQWdCLFdBQVcsQ0FBSSxDQUE4QztJQUMzRSxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDaEMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ3hCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2Y7S0FDRjtJQUNELE9BQU8sQ0FBUSxDQUFDO0FBQ2xCLENBQUM7QUFQRCxrQ0FPQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IscUJBQXFCLENBQUMsR0FBVztJQUMvQyxJQUFJLENBQUMsWUFBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUU7UUFDaEUsTUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLEdBQUcsZ0NBQWdDLENBQUMsQ0FBQztLQUMzRDtBQUNILENBQUM7QUFKRCxzREFJQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0IsYUFBYSxDQUFDLEdBQVcsRUFBRSxLQUFhLEVBQUUsR0FBVztJQUNuRSxJQUFJLENBQUMsWUFBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEtBQUssSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUU7UUFDN0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLEdBQUcsMkJBQTJCLEtBQUssSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ3BFO0FBQ0gsQ0FBQztBQUpELHNDQUlDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsT0FBdUc7SUFDdEksTUFBTSxRQUFRLEdBQThCLEVBQUUsQ0FBQztJQUMvQyxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFN0MsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFO1FBQzlDLDBCQUEwQjtRQUMxQixRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztLQUMzQztJQUVELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUM7QUFWRCw0Q0FVQztBQUVELFNBQWdCLDRCQUE0QixDQUFDLElBQXdCO0lBQ25FLE9BQU87UUFDTCxLQUFLLEVBQUUsSUFBSSxDQUFDLEdBQUc7UUFDZixRQUFRLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQy9CLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUTtLQUMzQixDQUFDO0FBQ0osQ0FBQztBQVBELG9FQU9DO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLEVBQWE7SUFDMUMsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBRkQsd0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEdXJhdGlvbiwgU2VjcmV0VmFsdWUsIFRva2VuIH0gZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgeyBCYXNlTG9nRHJpdmVyUHJvcHMgfSBmcm9tICcuL2Jhc2UtbG9nLWRyaXZlcic7XG5cbi8qKlxuICogUmVtb3ZlIHVuZGVmaW5lZCB2YWx1ZXMgZnJvbSBhIGRpY3Rpb25hcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUVtcHR5PFQ+KHg6IHsgW2tleTogc3RyaW5nXTogKFQgfCB1bmRlZmluZWQgfCBzdHJpbmcpIH0pOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9IHtcbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoeCkpIHtcbiAgICBpZiAoeFtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlbGV0ZSB4W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiB4IGFzIGFueTtcbn1cblxuLyoqXG4gKiBDaGVja3MgdGhhdCBhIHZhbHVlIGlzIGEgcG9zaXRpdmUgaW50ZWdlclxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlUG9zaXRpdmVJbnRlZ2VyKHZhbDogbnVtYmVyKSB7XG4gIGlmICghVG9rZW4uaXNVbnJlc29sdmVkKHZhbCkgJiYgTnVtYmVyLmlzSW50ZWdlcih2YWwpICYmIHZhbCA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFxcYCR7dmFsfVxcYCBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlci5gKTtcbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyB0aGF0IGEgdmFsdWUgaXMgY29udGFpbmVkIGluIGEgcmFuZ2Ugb2YgdHdvIG90aGVyIHZhbHVlc1xuICovXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlSW5SYW5nZSh2YWw6IG51bWJlciwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpIHtcbiAgaWYgKCFUb2tlbi5pc1VucmVzb2x2ZWQodmFsKSAmJiAhKHZhbCA+PSBzdGFydCAmJiB2YWwgPD0gZW5kKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgXFxgJHt2YWx9XFxgIG11c3QgYmUgd2l0aGluIHJhbmdlICR7c3RhcnR9OiR7ZW5kfWApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpbmdpZnlPcHRpb25zKG9wdGlvbnM6IHsgW2tleTogc3RyaW5nXTogKFNlY3JldFZhbHVlIHwgRHVyYXRpb24gfCBzdHJpbmcgfCBzdHJpbmdbXSB8IG51bWJlciB8IGJvb2xlYW4gfCB1bmRlZmluZWQpIH0pIHtcbiAgY29uc3QgX29wdGlvbnM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcbiAgY29uc3QgZmlsdGVyZWRPcHRpb25zID0gcmVtb3ZlRW1wdHkob3B0aW9ucyk7XG5cbiAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoZmlsdGVyZWRPcHRpb25zKSkge1xuICAgIC8vIENvbnZlcnQgdmFsdWUgdG8gc3RyaW5nXG4gICAgX29wdGlvbnNba2V5XSA9IGAke2ZpbHRlcmVkT3B0aW9uc1trZXldfWA7XG4gIH1cblxuICByZXR1cm4gX29wdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJDb21tb25Mb2dEcml2ZXJPcHRpb25zKG9wdHM6IEJhc2VMb2dEcml2ZXJQcm9wcykge1xuICByZXR1cm4ge1xuICAgICd0YWcnOiBvcHRzLnRhZyxcbiAgICAnbGFiZWxzJzogam9pbldpdGhDb21tYXMob3B0cy5sYWJlbHMpLFxuICAgICdlbnYnOiBqb2luV2l0aENvbW1hcyhvcHRzLmVudiksXG4gICAgJ2Vudi1yZWdleCc6IG9wdHMuZW52UmVnZXgsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBqb2luV2l0aENvbW1hcyh4cz86IHN0cmluZ1tdKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIHhzICYmIHhzLmpvaW4oJywnKTtcbn1cbiJdfQ==