"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log_driver_1 = require("./log-driver");
const utils_1 = require("./utils");
/**
 * Log Message Format
 */
var SplunkLogFormat;
(function (SplunkLogFormat) {
    SplunkLogFormat["INLINE"] = "inline";
    SplunkLogFormat["JSON"] = "json";
    SplunkLogFormat["RAW"] = "raw";
})(SplunkLogFormat = exports.SplunkLogFormat || (exports.SplunkLogFormat = {}));
/**
 * A log driver that sends log information to splunk Logs.
 */
class SplunkLogDriver extends log_driver_1.LogDriver {
    /**
     * Constructs a new instance of the SplunkLogDriver class.
     *
     * @param props the splunk log driver configuration options.
     */
    constructor(props) {
        super();
        this.props = props;
        if (props.gzipLevel) {
            utils_1.ensureInRange(props.gzipLevel, -1, 9);
        }
    }
    /**
     * Called when the log driver is configured on a container
     */
    bind(_scope, _containerDefinition) {
        return {
            logDriver: 'splunk',
            options: utils_1.stringifyOptions({
                'splunk-token': this.props.token,
                'splunk-url': this.props.url,
                'splunk-source': this.props.source,
                'splunk-sourcetype': this.props.sourceType,
                'splunk-index': this.props.index,
                'splunk-capath': this.props.caPath,
                'splunk-caname': this.props.caName,
                'splunk-insecureskipverify': this.props.insecureSkipVerify,
                'splunk-format': this.props.format,
                'splunk-verify-connection': this.props.verifyConnection,
                'splunk-gzip': this.props.gzip,
                'splunk-gzip-level': this.props.gzipLevel,
                ...utils_1.renderCommonLogDriverOptions(this.props),
            }),
        };
    }
}
exports.SplunkLogDriver = SplunkLogDriver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BsdW5rLWxvZy1kcml2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcGx1bmstbG9nLWRyaXZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLDZDQUEwRDtBQUMxRCxtQ0FBd0Y7QUFFeEY7O0dBRUc7QUFDSCxJQUFZLGVBSVg7QUFKRCxXQUFZLGVBQWU7SUFDekIsb0NBQWlCLENBQUE7SUFDakIsZ0NBQWEsQ0FBQTtJQUNiLDhCQUFXLENBQUE7QUFDYixDQUFDLEVBSlcsZUFBZSxHQUFmLHVCQUFlLEtBQWYsdUJBQWUsUUFJMUI7QUE4RkQ7O0dBRUc7QUFDSCxNQUFhLGVBQWdCLFNBQVEsc0JBQVM7SUFDNUM7Ozs7T0FJRztJQUNILFlBQTZCLEtBQTJCO1FBQ3RELEtBQUssRUFBRSxDQUFDO1FBRG1CLFVBQUssR0FBTCxLQUFLLENBQXNCO1FBR3RELElBQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNuQixxQkFBYSxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDdkM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxJQUFJLENBQUMsTUFBaUIsRUFBRSxvQkFBeUM7UUFDdEUsT0FBTztZQUNMLFNBQVMsRUFBRSxRQUFRO1lBQ25CLE9BQU8sRUFBRSx3QkFBZ0IsQ0FBQztnQkFDeEIsY0FBYyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSztnQkFDaEMsWUFBWSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRztnQkFDNUIsZUFBZSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTTtnQkFDbEMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVO2dCQUMxQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLO2dCQUNoQyxlQUFlLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO2dCQUNsQyxlQUFlLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO2dCQUNsQywyQkFBMkIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQjtnQkFDMUQsZUFBZSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTTtnQkFDbEMsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0I7Z0JBQ3ZELGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7Z0JBQzlCLG1CQUFtQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUztnQkFDekMsR0FBRyxvQ0FBNEIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQzVDLENBQUM7U0FDSCxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBckNELDBDQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCwgU2VjcmV0VmFsdWUgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IENvbnRhaW5lckRlZmluaXRpb24gfSBmcm9tICcuLi9jb250YWluZXItZGVmaW5pdGlvbic7XG5pbXBvcnQgeyBCYXNlTG9nRHJpdmVyUHJvcHMgfSBmcm9tICcuL2Jhc2UtbG9nLWRyaXZlcic7XG5pbXBvcnQgeyBMb2dEcml2ZXIsIExvZ0RyaXZlckNvbmZpZyB9IGZyb20gJy4vbG9nLWRyaXZlcic7XG5pbXBvcnQgeyBlbnN1cmVJblJhbmdlLCByZW5kZXJDb21tb25Mb2dEcml2ZXJPcHRpb25zLCBzdHJpbmdpZnlPcHRpb25zIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogTG9nIE1lc3NhZ2UgRm9ybWF0XG4gKi9cbmV4cG9ydCBlbnVtIFNwbHVua0xvZ0Zvcm1hdCB7XG4gIElOTElORSA9ICdpbmxpbmUnLFxuICBKU09OID0gJ2pzb24nLFxuICBSQVcgPSAncmF3J1xufVxuXG4vKipcbiAqIFNwZWNpZmllcyB0aGUgc3BsdW5rIGxvZyBkcml2ZXIgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuICpcbiAqIFtTb3VyY2VdKGh0dHBzOi8vZG9jcy5kb2NrZXIuY29tL2NvbmZpZy9jb250YWluZXJzL2xvZ2dpbmcvc3BsdW5rLylcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTcGx1bmtMb2dEcml2ZXJQcm9wcyBleHRlbmRzIEJhc2VMb2dEcml2ZXJQcm9wcyB7XG4gIC8qKlxuICAgKiBTcGx1bmsgSFRUUCBFdmVudCBDb2xsZWN0b3IgdG9rZW4uXG4gICAqL1xuICByZWFkb25seSB0b2tlbjogU2VjcmV0VmFsdWU7XG5cbiAgLyoqXG4gICAqIFBhdGggdG8geW91ciBTcGx1bmsgRW50ZXJwcmlzZSwgc2VsZi1zZXJ2aWNlIFNwbHVuayBDbG91ZCBpbnN0YW5jZSwgb3IgU3BsdW5rXG4gICAqIENsb3VkIG1hbmFnZWQgY2x1c3RlciAoaW5jbHVkaW5nIHBvcnQgYW5kIHNjaGVtZSB1c2VkIGJ5IEhUVFAgRXZlbnQgQ29sbGVjdG9yKVxuICAgKiBpbiBvbmUgb2YgdGhlIGZvbGxvd2luZyBmb3JtYXRzOiBodHRwczovL3lvdXJfc3BsdW5rX2luc3RhbmNlOjgwODggb3JcbiAgICogaHR0cHM6Ly9pbnB1dC1wcmQtcC1YWFhYWFhYLmNsb3VkLnNwbHVuay5jb206ODA4OCBvciBodHRwczovL2h0dHAtaW5wdXRzLVhYWFhYWFhYLnNwbHVua2Nsb3VkLmNvbS5cbiAgICovXG4gIHJlYWRvbmx5IHVybDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBFdmVudCBzb3VyY2UuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gc291cmNlIG5vdCBzZXQuXG4gICAqL1xuICByZWFkb25seSBzb3VyY2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEV2ZW50IHNvdXJjZSB0eXBlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIHNvdXJjZVR5cGUgbm90IHNldC5cbiAgICovXG4gIHJlYWRvbmx5IHNvdXJjZVR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEV2ZW50IGluZGV4LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGluZGV4IG5vdCBzZXQuXG4gICAqL1xuICByZWFkb25seSBpbmRleD86IHN0cmluZztcblxuICAvKipcbiAgICogUGF0aCB0byByb290IGNlcnRpZmljYXRlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGNhUGF0aCBub3Qgc2V0LlxuICAgKi9cbiAgcmVhZG9ubHkgY2FQYXRoPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lIHRvIHVzZSBmb3IgdmFsaWRhdGluZyBzZXJ2ZXIgY2VydGlmaWNhdGUuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gVGhlIGhvc3RuYW1lIG9mIHRoZSBzcGx1bmstdXJsXG4gICAqL1xuICByZWFkb25seSBjYU5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIElnbm9yZSBzZXJ2ZXIgY2VydGlmaWNhdGUgdmFsaWRhdGlvbi5cbiAgICpcbiAgICogQGRlZmF1bHQgLSBpbnNlY3VyZVNraXBWZXJpZnkgbm90IHNldC5cbiAgICovXG4gIHJlYWRvbmx5IGluc2VjdXJlU2tpcFZlcmlmeT86IHN0cmluZztcblxuICAvKipcbiAgICogTWVzc2FnZSBmb3JtYXQuIENhbiBiZSBpbmxpbmUsIGpzb24gb3IgcmF3LlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGlubGluZVxuICAgKi9cbiAgcmVhZG9ubHkgZm9ybWF0PzogU3BsdW5rTG9nRm9ybWF0O1xuXG4gIC8qKlxuICAgKiBWZXJpZnkgb24gc3RhcnQsIHRoYXQgZG9ja2VyIGNhbiBjb25uZWN0IHRvIFNwbHVuayBzZXJ2ZXIuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gdHJ1ZVxuICAgKi9cbiAgcmVhZG9ubHkgdmVyaWZ5Q29ubmVjdGlvbj86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEVuYWJsZS9kaXNhYmxlIGd6aXAgY29tcHJlc3Npb24gdG8gc2VuZCBldmVudHMgdG8gU3BsdW5rIEVudGVycHJpc2Ugb3IgU3BsdW5rXG4gICAqIENsb3VkIGluc3RhbmNlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAtIGZhbHNlXG4gICAqL1xuICByZWFkb25seSBnemlwPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU2V0IGNvbXByZXNzaW9uIGxldmVsIGZvciBnemlwLiBWYWxpZCB2YWx1ZXMgYXJlIC0xIChkZWZhdWx0KSwgMCAobm8gY29tcHJlc3Npb24pLFxuICAgKiAxIChiZXN0IHNwZWVkKSAuLi4gOSAoYmVzdCBjb21wcmVzc2lvbikuXG4gICAqXG4gICAqIEBkZWZhdWx0IC0gLTEgKERlZmF1bHQgQ29tcHJlc3Npb24pXG4gICAqL1xuICByZWFkb25seSBnemlwTGV2ZWw/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQSBsb2cgZHJpdmVyIHRoYXQgc2VuZHMgbG9nIGluZm9ybWF0aW9uIHRvIHNwbHVuayBMb2dzLlxuICovXG5leHBvcnQgY2xhc3MgU3BsdW5rTG9nRHJpdmVyIGV4dGVuZHMgTG9nRHJpdmVyIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIFNwbHVua0xvZ0RyaXZlciBjbGFzcy5cbiAgICpcbiAgICogQHBhcmFtIHByb3BzIHRoZSBzcGx1bmsgbG9nIGRyaXZlciBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBTcGx1bmtMb2dEcml2ZXJQcm9wcykge1xuICAgIHN1cGVyKCk7XG5cbiAgICBpZiAocHJvcHMuZ3ppcExldmVsKSB7XG4gICAgICBlbnN1cmVJblJhbmdlKHByb3BzLmd6aXBMZXZlbCwgLTEsIDkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUgbG9nIGRyaXZlciBpcyBjb25maWd1cmVkIG9uIGEgY29udGFpbmVyXG4gICAqL1xuICBwdWJsaWMgYmluZChfc2NvcGU6IENvbnN0cnVjdCwgX2NvbnRhaW5lckRlZmluaXRpb246IENvbnRhaW5lckRlZmluaXRpb24pOiBMb2dEcml2ZXJDb25maWcge1xuICAgIHJldHVybiB7XG4gICAgICBsb2dEcml2ZXI6ICdzcGx1bmsnLFxuICAgICAgb3B0aW9uczogc3RyaW5naWZ5T3B0aW9ucyh7XG4gICAgICAgICdzcGx1bmstdG9rZW4nOiB0aGlzLnByb3BzLnRva2VuLFxuICAgICAgICAnc3BsdW5rLXVybCc6IHRoaXMucHJvcHMudXJsLFxuICAgICAgICAnc3BsdW5rLXNvdXJjZSc6IHRoaXMucHJvcHMuc291cmNlLFxuICAgICAgICAnc3BsdW5rLXNvdXJjZXR5cGUnOiB0aGlzLnByb3BzLnNvdXJjZVR5cGUsXG4gICAgICAgICdzcGx1bmstaW5kZXgnOiB0aGlzLnByb3BzLmluZGV4LFxuICAgICAgICAnc3BsdW5rLWNhcGF0aCc6IHRoaXMucHJvcHMuY2FQYXRoLFxuICAgICAgICAnc3BsdW5rLWNhbmFtZSc6IHRoaXMucHJvcHMuY2FOYW1lLFxuICAgICAgICAnc3BsdW5rLWluc2VjdXJlc2tpcHZlcmlmeSc6IHRoaXMucHJvcHMuaW5zZWN1cmVTa2lwVmVyaWZ5LFxuICAgICAgICAnc3BsdW5rLWZvcm1hdCc6IHRoaXMucHJvcHMuZm9ybWF0LFxuICAgICAgICAnc3BsdW5rLXZlcmlmeS1jb25uZWN0aW9uJzogdGhpcy5wcm9wcy52ZXJpZnlDb25uZWN0aW9uLFxuICAgICAgICAnc3BsdW5rLWd6aXAnOiB0aGlzLnByb3BzLmd6aXAsXG4gICAgICAgICdzcGx1bmstZ3ppcC1sZXZlbCc6IHRoaXMucHJvcHMuZ3ppcExldmVsLFxuICAgICAgICAuLi5yZW5kZXJDb21tb25Mb2dEcml2ZXJPcHRpb25zKHRoaXMucHJvcHMpLFxuICAgICAgfSksXG4gICAgfTtcbiAgfVxufVxuIl19