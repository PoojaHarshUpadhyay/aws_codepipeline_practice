"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const have_resource_1 = require("@aws-cdk/assert/lib/assertions/have-resource");
const ec2 = require("@aws-cdk/aws-ec2");
const ecr = require("@aws-cdk/aws-ecr");
const ecs = require("@aws-cdk/aws-ecs");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/core");
const batch = require("../lib");
describe('Batch Job Definition', () => {
    let stack;
    let jobDefProps;
    beforeEach(() => {
        stack = new cdk.Stack();
        const role = new iam.Role(stack, 'job-role', {
            assumedBy: new iam.ServicePrincipal('batch.amazonaws.com'),
        });
        const linuxParams = new ecs.LinuxParameters(stack, 'job-linux-params', {
            initProcessEnabled: true,
            sharedMemorySize: 1,
        });
        jobDefProps = {
            jobDefinitionName: 'test-job',
            container: {
                command: ['echo "Hello World"'],
                environment: {
                    foo: 'bar',
                },
                jobRole: role,
                gpuCount: 1,
                image: ecs.EcrImage.fromRegistry('docker/whalesay'),
                instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),
                linuxParams,
                memoryLimitMiB: 1,
                mountPoints: new Array(),
                privileged: true,
                readOnly: true,
                ulimits: new Array(),
                user: 'root',
                vcpus: 2,
                volumes: new Array(),
            },
            nodeProps: {
                count: 2,
                mainNode: 1,
                rangeProps: new Array(),
            },
            parameters: {
                foo: 'bar',
            },
            retryAttempts: 2,
            timeout: cdk.Duration.seconds(30),
        };
    });
    test('renders the correct cloudformation properties', () => {
        // WHEN
        new batch.JobDefinition(stack, 'job-def', jobDefProps);
        // THEN
        expect(stack).toHaveResourceLike('AWS::Batch::JobDefinition', {
            JobDefinitionName: jobDefProps.jobDefinitionName,
            ContainerProperties: jobDefProps.container ? {
                Command: jobDefProps.container.command,
                Environment: [
                    {
                        Name: 'foo',
                        Value: 'bar',
                    },
                ],
                InstanceType: jobDefProps.container.instanceType ? jobDefProps.container.instanceType.toString() : '',
                LinuxParameters: {},
                Memory: jobDefProps.container.memoryLimitMiB,
                MountPoints: [],
                Privileged: jobDefProps.container.privileged,
                ReadonlyRootFilesystem: jobDefProps.container.readOnly,
                Ulimits: [],
                User: jobDefProps.container.user,
                Vcpus: jobDefProps.container.vcpus,
                Volumes: [],
            } : undefined,
            NodeProperties: jobDefProps.nodeProps ? {
                MainNode: jobDefProps.nodeProps.mainNode,
                NodeRangeProperties: [],
                NumNodes: jobDefProps.nodeProps.count,
            } : undefined,
            Parameters: {
                foo: 'bar',
            },
            RetryStrategy: {
                Attempts: jobDefProps.retryAttempts,
            },
            Timeout: {
                AttemptDurationSeconds: jobDefProps.timeout ? jobDefProps.timeout.toSeconds() : -1,
            },
            Type: 'container',
        }, have_resource_1.ResourcePart.Properties);
    });
    test('can use an ecr image', () => {
        // WHEN
        const repo = new ecr.Repository(stack, 'image-repo');
        new batch.JobDefinition(stack, 'job-def', {
            container: {
                image: ecs.ContainerImage.fromEcrRepository(repo),
            },
        });
        // THEN
        expect(stack).toHaveResourceLike('AWS::Batch::JobDefinition', {
            ContainerProperties: {
                Image: {
                    'Fn::Join': [
                        '',
                        [
                            {
                                'Fn::Select': [
                                    4,
                                    {
                                        'Fn::Split': [
                                            ':',
                                            {
                                                'Fn::GetAtt': [
                                                    'imagerepoD116FAF0',
                                                    'Arn',
                                                ],
                                            },
                                        ],
                                    },
                                ],
                            },
                            '.dkr.ecr.',
                            {
                                'Fn::Select': [
                                    3,
                                    {
                                        'Fn::Split': [
                                            ':',
                                            {
                                                'Fn::GetAtt': [
                                                    'imagerepoD116FAF0',
                                                    'Arn',
                                                ],
                                            },
                                        ],
                                    },
                                ],
                            },
                            '.',
                            {
                                Ref: 'AWS::URLSuffix',
                            },
                            '/',
                            {
                                Ref: 'imagerepoD116FAF0',
                            },
                            ':latest',
                        ],
                    ],
                },
                Memory: 4,
                Privileged: false,
                ReadonlyRootFilesystem: false,
                Vcpus: 1,
            },
        }, have_resource_1.ResourcePart.Properties);
    });
    test('can use a registry image', () => {
        // WHEN
        new batch.JobDefinition(stack, 'job-def', {
            container: {
                image: ecs.ContainerImage.fromRegistry('docker/whalesay'),
            },
        });
        // THEN
        expect(stack).toHaveResourceLike('AWS::Batch::JobDefinition', {
            ContainerProperties: {
                Image: 'docker/whalesay',
                Memory: 4,
                Privileged: false,
                ReadonlyRootFilesystem: false,
                Vcpus: 1,
            },
        }, have_resource_1.ResourcePart.Properties);
    });
    test('can be imported from an ARN', () => {
        // WHEN
        const importedJob = batch.JobDefinition.fromJobDefinitionArn(stack, 'job-def-clone', 'arn:aws:batch:us-east-1:123456789012:job-definition/job-def-name:1');
        // THEN
        expect(importedJob.jobDefinitionName).toEqual('job-def-name:1');
        expect(importedJob.jobDefinitionArn).toEqual('arn:aws:batch:us-east-1:123456789012:job-definition/job-def-name:1');
    });
});
//# sourceMappingURL=data:application/json;base64,