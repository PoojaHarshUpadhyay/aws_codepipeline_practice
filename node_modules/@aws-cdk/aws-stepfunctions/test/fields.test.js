"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const lib_1 = require("../lib");
describe('Fields', () => {
    test('deep replace correctly handles fields in arrays', () => {
        expect(lib_1.FieldUtils.renderObject({
            unknown: undefined,
            bool: true,
            literal: 'literal',
            field: lib_1.Data.stringAt('$.stringField'),
            listField: lib_1.Data.listAt('$.listField'),
            deep: [
                'literal',
                {
                    deepField: lib_1.Data.numberAt('$.numField'),
                },
            ],
        })).toStrictEqual({
            'bool': true,
            'literal': 'literal',
            'field.$': '$.stringField',
            'listField.$': '$.listField',
            'deep': [
                'literal',
                {
                    'deepField.$': '$.numField',
                },
            ],
        });
    }),
        test('exercise contextpaths', () => {
            expect(lib_1.FieldUtils.renderObject({
                str: lib_1.Context.stringAt('$$.Execution.StartTime'),
                count: lib_1.Context.numberAt('$$.State.RetryCount'),
                token: lib_1.Context.taskToken,
                entire: lib_1.Context.entireContext,
            })).toStrictEqual({
                'str.$': '$$.Execution.StartTime',
                'count.$': '$$.State.RetryCount',
                'token.$': '$$.Task.Token',
                'entire.$': '$$',
            });
        }),
        test('find all referenced paths', () => {
            expect(lib_1.FieldUtils.findReferencedPaths({
                bool: false,
                literal: 'literal',
                field: lib_1.Data.stringAt('$.stringField'),
                listField: lib_1.Data.listAt('$.listField'),
                deep: [
                    'literal',
                    {
                        field: lib_1.Data.stringAt('$.stringField'),
                        deepField: lib_1.Data.numberAt('$.numField'),
                    },
                ],
            })).toStrictEqual(['$.listField', '$.numField', '$.stringField']);
        }),
        test('cannot have JsonPath fields in arrays', () => {
            expect(() => lib_1.FieldUtils.renderObject({
                deep: [lib_1.Data.stringAt('$.hello')],
            })).toThrowError(/Cannot use JsonPath fields in an array/);
        }),
        test('datafield path must be correct', () => {
            expect(lib_1.Data.stringAt('$')).toBeDefined();
            expect(() => lib_1.Data.stringAt('$hello')).toThrowError(/exactly equal to '\$' or start with '\$.'/);
            expect(() => lib_1.Data.stringAt('hello')).toThrowError(/exactly equal to '\$' or start with '\$.'/);
        }),
        test('context path must be correct', () => {
            expect(lib_1.Context.stringAt('$$')).toBeDefined();
            expect(() => lib_1.Context.stringAt('$$hello')).toThrowError(/exactly equal to '\$\$' or start with '\$\$.'/);
            expect(() => lib_1.Context.stringAt('hello')).toThrowError(/exactly equal to '\$\$' or start with '\$\$.'/);
        }),
        test('test contains task token', () => {
            expect(true).toEqual(lib_1.FieldUtils.containsTaskToken({
                field: lib_1.Context.taskToken,
            }));
            expect(true).toEqual(lib_1.FieldUtils.containsTaskToken({
                field: lib_1.Context.stringAt('$$.Task'),
            }));
            expect(true).toEqual(lib_1.FieldUtils.containsTaskToken({
                field: lib_1.Context.entireContext,
            }));
            expect(false).toEqual(lib_1.FieldUtils.containsTaskToken({
                oops: 'not here',
            }));
            expect(false).toEqual(lib_1.FieldUtils.containsTaskToken({
                oops: lib_1.Context.stringAt('$$.Execution.StartTime'),
            }));
        }),
        test('arbitrary JSONPath fields are not replaced', () => {
            expect(lib_1.FieldUtils.renderObject({
                field: '$.content',
            })).toStrictEqual({
                field: '$.content',
            });
        }),
        test('fields cannot be used somewhere in a string interpolation', () => {
            expect(() => lib_1.FieldUtils.renderObject({
                field: `contains ${lib_1.Data.stringAt('$.hello')}`,
            })).toThrowError(/Field references must be the entire string/);
        });
});
//# sourceMappingURL=data:application/json;base64,